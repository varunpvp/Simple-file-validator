{"version":3,"sources":["main.js"],"names":["SimpleFileValidator","ERROR_TYPE","ERROR_MAX_SIZE","ERROR_MIN_SIZE","setFileRulesOn","selector","rules","TYPE_EXT","TYPE_MIME_ALL","TYPE_MIME_ONLY","REGEX_EXT","REGEX_MIME_ALL","REGEX_MIME_ONLY","REGEX_SIZE_IN_KB","REGEX_SIZE_IN_MB","supportedTypes","accept","minSize","maxSize","onInvalid","input","file","l","console","log","toLowerCase","replace","RegExp","split","forEach","acceptStringType","typeClass","typeValue","test","push","getSizeInBytes","document","querySelectorAll","attachOnChangeListener","tagName","inputType","type","addEventListener","checkInput","required","files","i","length","fileTypeError","checkInputFileType","fileSizeError","checkInputFileSize","name","error","every","cateria","endsWith","startsWith","fileSize","size","actualSize","isMb","isKb","sizeInBytes","Number","substring","msg"],"mappings":"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","file":"main.map","sourceRoot":"..","sourcesContent":["const SimpleFileValidator = {\r\n\tERROR_TYPE: 1,\r\n\tERROR_MAX_SIZE: 2,\r\n\tERROR_MIN_SIZE: 3\r\n};\r\n\r\nfunction setFileRulesOn(selector, rules) {\r\n\r\n\tconst TYPE_EXT = \"ext\";\r\n\tconst TYPE_MIME_ALL = \"mime_all\";\r\n\tconst TYPE_MIME_ONLY = \"mime_only\";\r\n\r\n\tconst REGEX_EXT = /^\\.[a-z0-9]+$/;\r\n\tconst REGEX_MIME_ALL = /^[a-z0-9\\-]+\\/\\*$/;\r\n\tconst REGEX_MIME_ONLY = /^[a-z0-9\\-]+\\/[a-z0-9\\-]+$/;\r\n\r\n\tconst REGEX_SIZE_IN_KB = /^[0-9\\.]+k$/;\r\n\tconst REGEX_SIZE_IN_MB = /^[0-9\\.]+m$/;\r\n\t\r\n\tif (!(typeof selector === \"string\" && selector)) {\r\n\t\tl(\"No valid selector defined\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tif (!(typeof rules === \"object\" && rules)) {\r\n\t\tl(\"No valid rules defined\");\r\n\t\treturn;\r\n\t}\r\n\r\n\tconst supportedTypes = [];\r\n\r\n\tconst accept = rules.accept;\r\n\r\n\tvar minSize = 0;\r\n\tvar maxSize = 0;\r\n\r\n\tvar onInvalid = function(input, file) {\r\n\t\tl(\"Invalid input file\");\r\n\t\tconsole.log(input);\r\n\t\tconsole.log(file);\r\n\t};\r\n\r\n\tif (typeof accept == \"string\" && accept) {\r\n\t\taccept.toLowerCase()\r\n\t\t\t.replace(new RegExp(\" \", 'g'), \"\")\r\n\t\t\t.split(\",\")\r\n\t\t\t.forEach(function (acceptStringType) {\r\n\r\n\t\t\t\tvar typeClass, typeValue;\r\n\r\n\t\t\t\tif (REGEX_EXT.test(acceptStringType)) {\r\n\t\t\t\t\ttypeClass = TYPE_EXT;\r\n\t\t\t\t\ttypeValue = acceptStringType;\r\n\t\t\t\t} else if (REGEX_MIME_ALL.test(acceptStringType)) {\r\n\t\t\t\t\ttypeClass = TYPE_MIME_ALL;\r\n\t\t\t\t\ttypeValue = acceptStringType.replace(\"*\", \"\");\r\n\t\t\t\t} else if (REGEX_MIME_ONLY.test(acceptStringType)) {\r\n\t\t\t\t\ttypeClass = TYPE_MIME_ONLY;\r\n\t\t\t\t\ttypeValue = acceptStringType;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (typeClass) {\r\n\t\t\t\t\tsupportedTypes.push({\r\n\t\t\t\t\t\ttypeClass: typeClass,\r\n\t\t\t\t\t\ttypeValue: typeValue\r\n\t\t\t\t\t});\r\n\t\t\t\t} else {\r\n\t\t\t\t\tl(\"Accpet type is not supported\");\r\n\t\t\t\t}\r\n\t\t\t});\r\n    } else {\r\n\t\tl(\"No proper accept rule defined\");\r\n\t}\r\n\t\r\n\tif (rules.maxSize) {\r\n\t\tmaxSize = getSizeInBytes(rules.maxSize);\r\n\t}\r\n\r\n\tif (rules.minSize) {\r\n\t\tminSize = getSizeInBytes(rules.minSize);\r\n\t}\r\n \r\n\tif (typeof rules.onInvalid === \"function\") {\r\n\t\tonInvalid = rules.onInvalid;\r\n\t}\r\n\r\n\tdocument.querySelectorAll(selector).forEach(attachOnChangeListener);\r\n\r\n\tfunction attachOnChangeListener(input) {\r\n\r\n\t\tconst tagName = input.tagName.toLowerCase();\r\n\t\tconst inputType = input.type.toLowerCase();\r\n\r\n\t\tif (tagName === \"input\" && inputType === \"file\") {\r\n\t\t\tinput.addEventListener(\"change\", checkInput);\r\n\t\t\t// apply the accept rule to file input element\r\n\t\t\tinput.accept = accept;\r\n\t\t\t// check if required is defined and set\r\n\t\t\tif (rules.required) {\r\n\t\t\t\t// apply the required rule\r\n\t\t\t\tinput.required = true;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tl(\"Input type should be file.\");\r\n\t\t}\r\n\t}\r\n\r\n\tfunction checkInput() {\r\n\r\n\t\tconst files = this.files;\r\n\r\n\t\tfor (var i = 0; i < files.length; i++) {\r\n\t\t\tconst file = files[i];\r\n\r\n\t\t\tconst fileTypeError = checkInputFileType(file);\r\n\r\n\t\t\tconst fileSizeError = checkInputFileSize(file);\r\n\r\n\t\t\tif (fileTypeError) {\r\n\t\t\t\tonInvalid(this, file, fileTypeError);\r\n\t\t\t} else if (fileSizeError) {\r\n\t\t\t\tonInvalid(this, file, fileSizeError);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction checkInputFileType(file) {\r\n\r\n\t\tconst name = file.name.toLowerCase();\r\n\t\tvar error = SimpleFileValidator.ERROR_TYPE;\r\n\r\n\t\tsupportedTypes.every(function(type) {\r\n\r\n\t\t\tconst typeValue = type.typeValue;\r\n\r\n\t\t\tvar cateria = false;\r\n\r\n\t\t\tswitch (type.typeClass) {\r\n\t\t\t\tcase TYPE_EXT:\r\n\t\t\t\t\tcateria = name.endsWith(typeValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase TYPE_MIME_ONLY:\r\n\t\t\t\t\tcateria = file.type == typeValue;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase TYPE_MIME_ALL:\r\n\t\t\t\t\tcateria = file.type.startsWith(typeValue);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif (cateria) {\r\n\t\t\t\terror = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\treturn error;\r\n\t}\r\n\r\n\tfunction checkInputFileSize(file) {\r\n\r\n\t\tconst fileSize = file.size;\r\n\r\n\t\tif (minSize && fileSize < minSize) {\r\n\t\t\treturn SimpleFileValidator.ERROR_MIN_SIZE;\r\n\t\t} else if (maxSize && fileSize > maxSize) {\r\n\t\t\treturn SimpleFileValidator.ERROR_MAX_SIZE;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tfunction getSizeInBytes(size) {\r\n\t\tif (typeof size === \"number\") {\r\n\t\t\treturn size;\r\n\t\t} else if (typeof size === \"string\") {\r\n\r\n\t\t\tconst actualSize = size.replace(new RegExp(\" \", 'g'), \"\");\r\n\r\n\t\t\tconst isMb = REGEX_SIZE_IN_MB.test(actualSize);\r\n\t\t\tconst isKb = REGEX_SIZE_IN_KB.test(actualSize);\r\n\r\n\t\t\tif (isMb || isKb) {\r\n\t\t\t\tvar sizeInBytes = Number(actualSize.substring(0, actualSize.length - 1));\r\n\t\t\t\tsizeInBytes *= 1024;\r\n\t\t\t\tif (isMb) {\r\n\t\t\t\t\tsizeInBytes *= 1024;\r\n\t\t\t\t}\r\n\t\t\t\treturn sizeInBytes;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tfunction l(msg) {\r\n\t\tconsole.log(\"[Simple File Validator] \" + msg);\r\n\t}\r\n}"]}